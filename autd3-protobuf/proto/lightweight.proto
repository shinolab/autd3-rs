syntax = "proto3";

package autd3;

import "autd3.proto";
import "utils.proto";
import "utils-lightweight.proto";
import "gain.proto";
import "modulation.proto";
import "datagram.proto";

message Datagram {
  oneof datagram {
    Clear clear = 1;
    Synchronize synchronize = 2;
    ForceFan force_fan = 3;
    ReadsFPGAState reads_fpga_state = 4;
    Silencer silencer = 5;
    SwapSegment swap_segment = 6;
    Modulation modulation = 10;
    ModulationWithSegment modulation_with_segment = 11;
    Gain gain = 30;
    GainWithSegment gain_with_segment = 31;
    FociSTM foci_stm = 40;
    FociSTMWithSegment foci_stm_with_segment = 41;
    GainSTM gain_stm = 50;
    GainSTMWithSegment gain_stm_with_segment = 51;
  }
  optional uint64 timeout = 1001;
  optional uint64 parallel_threshold = 1002;
}

message SendResponseLightweight {
  bool success = 1;
  bool err = 2;
  string msg = 3;
}

message FirmwareVersionRequestLightweight {}
message FirmwareVersionResponseLightweight {
  message FirmwareVersion {
    uint32 fpga_major_version = 1;
    uint32 fpga_minor_version = 2;
    uint32 cpu_major_version = 3;
    uint32 cpu_minor_version = 4;
    uint32 fpga_function_bits = 5;
  }
  bool success = 1;
  string msg = 2;
  repeated FirmwareVersion firmware_version_list = 3;
}

message CloseRequestLightweight {}

message OpenRequestLightweight {
  Geometry geometry = 1;
  uint64 parallel_threshold = 2;
  uint64 send_interval = 3;
  uint32 timer_resolution = 4;
}

service ECATLight {
  rpc Open(OpenRequestLightweight) returns (SendResponseLightweight) {}
  rpc FirmwareVersion(FirmwareVersionRequestLightweight) returns (FirmwareVersionResponseLightweight) {}
  rpc Send(Datagram) returns (SendResponseLightweight) {}
  rpc Close(CloseRequestLightweight) returns (SendResponseLightweight) {}
}
