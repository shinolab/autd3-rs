syntax = "proto3";

package autd3;

import "autd3.proto";
import "utils.proto";
import "utils-lightweight.proto";
import "gain.proto";
import "modulation.proto";
import "datagram.proto";

message RawDatagram {
  oneof datagram {
    Clear clear = 1;
    Synchronize synchronize = 2;
    ForceFan force_fan = 3;
    ReadsFPGAState reads_fpga_state = 4;
    Silencer silencer = 5;
    SwapSegment swap_segment = 6;
    Modulation modulation = 10;
    Gain gain = 30;
    FociSTM foci_stm = 40;
    GainSTM gain_stm = 50;
    WithSegment with_segment = 60;
    WithLoopBehavior with_loop_behavior = 61;
  }
}

message DatagramTuple {
  RawDatagram first = 1;
  optional RawDatagram second = 2;
}

message Group {
  repeated int32 keys = 1;
  repeated DatagramTuple datagrams = 2;
}

message Datagram {
  oneof datagram {
    DatagramTuple tuple = 1;
    Group group = 2;
  }
}

enum ParallelMode {
  Auto = 0;
  On = 1;
  Off = 2;
}

enum SpinStrategy {
  YieldThread = 0;
  SpinLoopHint = 1;
}

message StdSleeper { optional uint32 timer_resolution = 1; }

message SpinSleeper {
  uint32 native_accuracy_ns = 1;
  SpinStrategy spin_strategy = 2;
}

message WaitableSleeper {}

message AsyncSleeper { optional uint32 timer_resolution = 1; }

message Sleeper {
  oneof sleeper {
    StdSleeper std = 1;
    SpinSleeper spin = 2;
    WaitableSleeper waitable = 3;
    AsyncSleeper async = 4;
  }
}

message SenderOption {
  uint64 send_interval_ns = 1;
  uint64 receive_interval_ns = 2;
  optional uint64 timeout_ns = 3;
  ParallelMode parallel = 4;
}

message SendRequestLightweight {
  Datagram datagram = 1;
  optional SenderOption sender_option = 2;
  optional Sleeper sleeper = 3;
}

message SendResponseLightweight {
  bool err = 1;
  string msg = 2;
}

message FirmwareVersionRequestLightweight {}
message FirmwareVersionResponseLightweight {
  message FirmwareVersion {
    uint32 fpga_major_version = 1;
    uint32 fpga_minor_version = 2;
    uint32 cpu_major_version = 3;
    uint32 cpu_minor_version = 4;
    uint32 fpga_function_bits = 5;
  }
  bool err = 1;
  string msg = 2;
  repeated FirmwareVersion firmware_version_list = 3;
}

message FPGAStateRequestLightweight {}
message FPGAStateResponseLightweight {
  message FPGAState { optional uint32 state = 1; }
  bool err = 1;
  string msg = 2;
  repeated FPGAState fpga_state_list = 3;
}

message CloseRequestLightweight {}

message OpenRequestLightweight {
  Geometry geometry = 1;
  optional SenderOption sender_option = 2;
  optional Sleeper sleeper = 3;
}

service ECATLight {
  rpc Open(OpenRequestLightweight) returns (SendResponseLightweight) {}
  rpc FirmwareVersion(FirmwareVersionRequestLightweight)
      returns (FirmwareVersionResponseLightweight) {}
  rpc FpgaState(FPGAStateRequestLightweight)
      returns (FPGAStateResponseLightweight) {}
  rpc Send(SendRequestLightweight) returns (SendResponseLightweight) {}
  rpc Close(CloseRequestLightweight) returns (SendResponseLightweight) {}
}
