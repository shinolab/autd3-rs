syntax = "proto3";

package autd3;

import "utils.proto";
import "utils-lightweight.proto";

message Bessel {
  Point3 pos = 1;
  UnitVector3 dir = 2;
  Angle theta = 3;
  optional EmitIntensity intensity = 4;
  optional Phase phase_offset = 5;
}

message Focus {
  Point3 pos = 1;
  optional EmitIntensity intensity = 2;
  optional Phase phase_offset = 3;
}

message Null {}

message Plane {
  UnitVector3 dir = 1;
  optional EmitIntensity intensity = 2;
  optional Phase phase_offset = 3;
}

message Uniform {
  EmitIntensity intensity = 1;
  Phase phase = 2;
}

message Amplitude {
  float value = 1;
}

message Holo {
  Point3 pos = 1;
  Amplitude amp = 2;
}

message NormalizeConstraint {}
message MultiplyConstraint { float value = 1; }
message UniformConstraint { EmitIntensity value = 1; }
message ClampConstraint {
  EmitIntensity min = 1;
  EmitIntensity max = 2;
}
message EmissionConstraint {
  oneof constraint {
    NormalizeConstraint normalize = 1;
    UniformConstraint uniform = 2;
    ClampConstraint clamp = 3;
    MultiplyConstraint multiply = 4;
  }
}

message Naive {
  repeated Holo holo = 1;
  optional EmissionConstraint constraint = 2;
}

message GS {
  repeated Holo holo = 1;
  optional EmissionConstraint constraint = 2;
  optional uint64 repeat = 3;
}

message GSPAT {
  repeated Holo holo = 1;
  optional EmissionConstraint constraint = 2;
  optional uint64 repeat = 3;
}

message LM {
  repeated Holo holo = 1;
  EmissionConstraint constraint = 2;
  optional float eps_1 = 3;
  optional float eps_2 = 4;
  optional float tau = 5;
  optional uint64 k_max = 6;
  repeated float initial = 7;
}

message Greedy {
  repeated Holo holo = 1;
  optional EmissionConstraint constraint = 2;
  optional uint32 phase_div = 3;
}

message Gain {
  oneof gain {
    Bessel bessel = 1;
    Focus focus = 2;
    Null null = 3;
    Plane plane = 4;
    Uniform uniform = 5;
    Naive naive = 101;
    GS gs = 102;
    GSPAT gspat = 103;
    LM lm = 104;
    Greedy greedy = 105;
  }
}

message GainWithSegment {
  Gain gain = 1;
  optional Segment segment = 2;
  optional TransitionMode transition_mode = 3;
}